/**
 * Composant de s√©lection d'ic√¥nes pour MGcaisse3.0
 * Permet de choisir un emoji ou une ic√¥ne pour un produit
 */

import React, { useState, useEffect } from 'react';

// Liste d'emojis populaires pour les produits
const POPULAR_EMOJIS = [
  'üçï', 'üçî', 'üçü', 'üå≠', 'üçø', 'üßÇ', 'ü•ì', 'ü•ö', 'üç≥', 'üßá', 'ü•û', 'üßà',
  'üçû', 'ü•ê', 'ü•®', 'ü•Ø', 'ü•ñ', 'üßÄ', 'ü•ó', 'ü•ô', 'ü•™', 'üåÆ', 'üåØ', 'ü•´',
  'üçñ', 'üçó', 'ü•©', 'üç†', 'ü•ü', 'ü•†', 'ü•°', 'üç±', 'üçò', 'üçô', 'üçö', 'üçõ',
  'üçú', 'üçù', 'üç£', 'üç§', 'üç•', 'ü•Æ', 'üç¢', 'üßÜ', 'ü•ò', 'üç≤', 'ü•£', 'ü•ß',
  'üç¶', 'üçß', 'üç®', 'üç©', 'üç™', 'üéÇ', 'üç∞', 'üßÅ', 'üç´', 'üç¨', 'üç≠', 'üçÆ',
  'üçØ', 'üçº', 'ü•õ', '‚òï', 'üçµ', 'üç∂', 'üçæ', 'üç∑', 'üç∏', 'üçπ', 'üç∫', 'üçª',
  'ü•Ç', 'ü•É', 'ü•§', 'üßÉ', 'üßâ', 'üßä', 'ü•¢', 'üçΩÔ∏è', 'üç¥', 'ü•Ñ', 'üè∫', 'üßã',
  'üëï', 'üëñ', 'üß£', 'üß§', 'üß•', 'üß¶', 'üëó', 'üëò', 'ü•ª', 'ü©±', 'ü©≤', 'ü©≥',
  'üëô', 'üëö', 'üëõ', 'üëú', 'üëù', 'üõçÔ∏è', 'üéí', 'üëû', 'üëü', 'ü•æ', 'ü•ø', 'üë†',
  'üë°', 'ü©∞', 'üë¢', 'üëë', 'üëí', 'üé©', 'üéì', 'üß¢', '‚õëÔ∏è', 'üíÑ', 'üíç', 'üíº',
  'üì±', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üì∑', 'üì∏', 'üìπ', 'üìº', 'üîç',
  'üîé', 'üïØÔ∏è', 'üí°', 'üî¶', 'üèÆ', 'üìî', 'üìï', 'üìñ', 'üìó', 'üìò', 'üìô', 'üìö',
  'üìì', 'üìí', 'üìÉ', 'üìú', 'üìÑ', 'üì∞', 'üóûÔ∏è', 'üìë', 'üîñ', 'üè∑Ô∏è', 'üí∞', 'üí¥',
  'üíµ', 'üí∂', 'üí∑', 'üí∏', 'üí≥', 'üßæ', '‚úâÔ∏è', 'üìß', 'üì®', 'üì©', 'üì§', 'üì•',
];

interface IconSelectorProps {
  value?: string;
  onChange: (icon: string) => void;
  className?: string;
}

export const IconSelector: React.FC<IconSelectorProps> = ({ 
  value = '', 
  onChange,
  className = ''
}) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredEmojis, setFilteredEmojis] = useState(POPULAR_EMOJIS);
  const [selectedIcon, setSelectedIcon] = useState(value);

  // Filtrer les emojis en fonction du terme de recherche
  useEffect(() => {
    if (!searchTerm) {
      setFilteredEmojis(POPULAR_EMOJIS);
      return;
    }

    // Simple filtre bas√© sur la description (pourrait √™tre am√©lior√© avec des tags)
    const filtered = POPULAR_EMOJIS.filter(() => {
      // Cette approche est simplifi√©e, id√©alement nous aurions des descriptions/tags pour chaque emoji
      return true; // Pour l'instant, on ne filtre pas r√©ellement
    });

    setFilteredEmojis(filtered);
  }, [searchTerm]);

  // Mettre √† jour la valeur s√©lectionn√©e et notifier le parent
  const handleSelectIcon = (icon: string) => {
    setSelectedIcon(icon);
    onChange(icon);
  };

  return (
    <div className={`icon-selector ${className}`}>
      <div className="mb-4">
        <label htmlFor="icon-search" className="block text-sm font-medium text-gray-700 mb-1">
          Rechercher une ic√¥ne
        </label>
        <input
          type="text"
          id="icon-search"
          placeholder="Rechercher..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
        />
      </div>

      <div className="selected-icon mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Ic√¥ne s√©lectionn√©e
        </label>
        <div className="flex items-center justify-center h-16 w-16 border border-gray-300 rounded-md bg-gray-50">
          {selectedIcon ? (
            <span className="text-4xl">{selectedIcon}</span>
          ) : (
            <span className="text-gray-400">Aucune</span>
          )}
        </div>
      </div>

      <div className="emoji-grid">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Choisir une ic√¥ne
        </label>
        <div className="grid grid-cols-8 gap-2 p-2 border border-gray-300 rounded-md bg-white max-h-60 overflow-y-auto">
          {filteredEmojis.map((emoji, index) => (
            <button
              key={index}
              type="button"
              onClick={() => handleSelectIcon(emoji)}
              className={`flex items-center justify-center h-8 w-8 rounded-md hover:bg-gray-100 ${
                selectedIcon === emoji ? 'bg-indigo-100 border border-indigo-500' : ''
              }`}
            >
              <span className="text-xl">{emoji}</span>
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default IconSelector;
